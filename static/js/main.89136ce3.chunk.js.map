{"version":3,"sources":["components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["CardList","robots","Error","SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAyBeA,EAtBE,SAAC,GAAe,EAAbC,OAElB,MAAM,IAAIC,MAAM,aCYHC,EAZG,SAAC,GAAiC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACC,qBAAKC,UAAU,MAAf,SACC,uBACCA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAWJ,OCAAK,EAVA,SAACC,GACf,OACC,qBAAKC,MAAS,CAACC,UAAW,SAC1BC,OAAQ,kBACRC,OAAO,QAFP,SAGEJ,EAAMK,YCeKC,E,kDAnBd,WAAaN,GAAQ,IAAD,8BACnB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHQ,E,8DAODC,EAAOC,GACzBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAA4B,IAAxBG,KAAKJ,MAAMC,SACP,wDAEDG,KAAKX,MAAMK,a,GAhBQQ,aCqEbC,G,wDAxDd,aAAe,IAAD,8BACb,gBAsBDC,eAAiB,SAACC,GAEjB,EAAKJ,SAAS,CAACnB,YAAauB,EAAMC,OAAOC,SAvBzC,EAAKX,MAAQ,CAIZjB,OAAQ,GACRG,YAAa,IAPD,E,gEAaQ,IAAD,OACpB0B,MAAM,8CACJC,MAAK,SAAAC,GACL,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GACL,EAAKX,SAAS,CAAEtB,OAAQiC,S,+BASlB,IAAD,OAKDC,EAAiBb,KAAKJ,MAAMjB,OAAOmC,QAAO,SAAAC,GAC/C,OAAOA,EAAMC,KAAKC,cAAcC,SAAS,EAAKtB,MAAMd,YAAYmC,kBAGjE,OAAiC,IAA7BjB,KAAKJ,MAAMjB,OAAOwC,OACd,oBAAInC,UAAU,KAAd,qBAGN,sBAAKA,UAAU,KAAf,UACC,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWD,aAAgBiB,KAAKI,iBAChC,cAAC,EAAD,UACC,cAAC,EAAD,UACC,cAAC,EAAD,CAAUzB,OAASkC,e,GA/CRX,cCFHkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCEdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.89136ce3.chunk.js","sourcesContent":["import React from 'react';\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n\tif (true) {\n\t\tthrow new Error(\"Noooo :(\")\n\t}\n\treturn (\n\t\t<div>\n    \t\t{\n    \t\t\trobots.map((user,i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\tkey= {i}\n\t\t\t\t\t\tid={robots[i].id}\n\t\t\t\t\t\tname={robots[i].name}\n\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t}) \n\t\t\t}\n    \t</div>\n\t\t);\n}\n\nexport default CardList;","import React from 'react';\n\n//{ searchfield, searchChange } here we are DESTRUCTURING, it allows us to\n//grabs the props object and grab its properties.\n\nconst SearchBox = ({searchfield, searchChange }) => {\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t\t<input\n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\n\t\t\t\ttype=\"search\"\n\t\t\t\tplaceholder=\"search robots\"\n\t\t\t\tonChange= {searchChange}/>\n\t\t</div>\n\t\t);\n};\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style = {{overflowY: 'scroll',\n\t\tborder: '1px solid black',\n\t\theight:'75vh'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\tconstructor (props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false,\n\t\t}\n\t}\n\t//If an error arises, then this function is automatically run.\n\tcomponentDidCatch (error, info) {\n\t\tthis.setState({hasError: true})\n\t}\n\n\trender() {\n\t\tif (this.state.hasError === true) {\n\t\t\treturn <h1>Ooops! That is no good</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll'\nimport { robots } from '../components/robots';\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport './App.css';\n\n\n// This is where all the window is set-up.\n// Since with react components you can return only one thing at a time, it is\n// useful to articulate the web app inside a <div>.\n\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\t//Our state is robors and searchfield, is what describes our app.\n\t\t\t//State is something that can change and affect our app.\n\t\t\t//In fact we want a reponsive search.\n\t\t\trobots: [],\n\t\t\tsearchfield: '',\n\t\t\t//This is the virtual DOM of React. React than uses these states\n\t\t\t//to render and pass them down as props to the latter components.\n\t\t}\n\t}\n\n\tcomponentDidMount () {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response => {\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then(users => {\n\t\t\t\tthis.setState({ robots: users});\n\t\t\t})\n\t}\n\n\tonSearchChange = (event) => {\n\t\t//updating the searchfield variable with what is written inside it\n\t\tthis.setState({searchfield: event.target.value});\n\t}\n\n\trender(){\n\t\t//creating a variable where we filter the robot array with what is\n\t\t//written inside the searchfield.\n\t\t// With the information that we have from the searchbox we can\n\t\t// communicate to the card list and filter accordingly.\n\t\tconst filteredRobots = this.state.robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t\t})\n\n\t\tif (this.state.robots.length === 0) {\n\t\t\treturn <h1 className='tc'>Loading</h1>\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t\t<SearchBox searchChange = {this.onSearchChange}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t\t<CardList robots= {filteredRobots}/>\n\t\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n}\n\n\nexport default App;\n\n\n// To upgrade your project just go into the terminal and write\n// \"npm update\". The terminal will upload the packages where there are \n// no vulnerabilities and will list you all the vulnerabilities that \n// your project could incur to while being updated of certain packages. \n// To go on with the update and ignore the vulnerabilities, just write \n// \"npm audit fix --force\" in the terminal.\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Card from './components/Card';\nimport App from './containers/App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}